const { Client, Intents } = require('discord.js');
const client = new Client({ 
    intents: [
        Intents.FLAGS.GUILDS,
        Intents.FLAGS.GUILD_MESSAGES
    ]
});

const emojiOptions = ['‚è≥', '‚åõ', '‚è±Ô∏è', '‚è≤Ô∏è', 'üï∞Ô∏è']; // Emojis para sele√ß√£o de tempo de estudo

let studyTimer; // Vari√°vel para armazenar o temporizador

client.on('messageCreate', async (message) => {
    if (message.content.startsWith('/timer start')) {
        // Iniciar o temporizador
        await startStudyTimer(message);
    } else if (message.content === '/timer stop') {
        // Parar o temporizador, se estiver em andamento
        if (studyTimer) {
            clearInterval(studyTimer);
            studyTimer = null;
            await message.channel.send(`‚èπÔ∏è Timer de estudo cancelado.`);
        } else {
            await message.channel.send(`N√£o h√° nenhum timer de estudo em andamento.`);
        }
    }
});

async function startStudyTimer(message) {
    const filter = (reaction, user) => emojiOptions.includes(reaction.emoji.name) && user.id === message.author.id;
    const timeOptions = ['30m', '1h', '1h30m', '2h', '2h30m', '3h', '3h30m', '4h', '4h30m', '5h']; // Op√ß√µes de tempo
    const timeDisplay = ['30 minutos', '1 hora', '1 hora e 30 minutos', '2 horas', '2 horas e 30 minutos', '3 horas', '3 horas e 30 minutos', '4 horas', '4 horas e 30 minutos', '5 horas']; // Display dos tempos

    const timeEmbed = {
        color: '#0099ff',
        title: 'Tempo de estudo',
        description: `Selecione a dura√ß√£o do estudo:`,
        fields: timeOptions.map((time, index) => ({ name: `${emojiOptions[index]} - ${timeDisplay[index]}`, value: '\u200B' })),
    };

    const studyMessage = await message.channel.send({ embeds: [timeEmbed] });
    for (const emoji of emojiOptions) {
        await studyMessage.react(emoji);
    }

    const collector = studyMessage.createReactionCollector({ filter, time: 60000 }); // Tempo limite de 60 segundos

    collector.on('collect', async (reaction) => {
        const selectedTime = timeOptions[emojiOptions.indexOf(reaction.emoji.name)];
        const durationInMinutes = parseInt(selectedTime.replace('h', '').replace('m', ''));

        if (!studyTimer) {
            await message.channel.send(`<@${message.author.id}> - Estudo iniciado por ${timeDisplay[timeOptions.indexOf(selectedTime)]}.`);

            studyTimer = setInterval(async () => {
                await message.channel.send(`<@${message.author.id}> - Hora de fazer uma pausa!`);
                clearInterval(studyTimer);

                // Espera 30 minutos para a pausa e reinicia o temporizador para o pr√≥ximo ciclo
                setTimeout(async () => {
                    await message.channel.send(`<@${message.author.id}> - Pausa encerrada, hora de voltar a estudar.`);
                    studyTimer = null;
                }, 30 * 60 * 1000); // 30 minutos em milissegundos
            }, durationInMinutes * 60 * 1000); // Dura√ß√£o de estudo em minutos em milissegundos
        }
        collector.stop();
    });

    collector.on('end', () => {
        if (!studyTimer) {
            message.channel.send(`<@${message.author.id}> - Tempo para sele√ß√£o esgotado. Use /timer start para iniciar novamente.`);
        }
    });
}

client.login('YOUR_BOT_TOKEN'); // Substitua com o token do seu bot
